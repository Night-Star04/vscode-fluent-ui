name: Continuous Integration

on:
    workflow_dispatch: # Use to run the workflow manually
        inputs:
            tag:
                description: 'Tag to release'
                required: false
                type: string
            pre_release:
                description: 'Pre-release version'
                required: false
                type: boolean
                default: false
            skip_github:
                description: 'Skip GitHub release'
                required: false
                type: boolean
                default: false
            skip_vscode:
                description: 'Skip VSCode release'
                required: false
                type: boolean
                default: false
            skip_openvsx:
                description: 'Skip OpenVSX release'
                required: false
                type: boolean
                default: false
    push:
        tags: # Use to run the workflow when a tag is pushed
            - '*'

jobs:
    ci-compile:
        name: Compile extension
        strategy:
            fail-fast: false # If one job fails, the others will still run
            matrix:
                include:
                    # Windows
                    - os: windows-latest
                      platform: win32
                      arch: x64
                    # - os: windows-latest
                    #   platform: win32
                    #   arch: arm64

                    # Linux
                    - os: ubuntu-latest
                      platform: linux
                      arch: x64
                    # - os: ubuntu-latest
                    #   platform: linux
                    #   arch: arm64
                    # - os: ubuntu-latest
                    #   platform: linux
                    #   arch: armhf
                    - os: ubuntu-latest
                      platform: alpine
                      arch: x64

                    # macOS
                    - os: macos-latest
                      platform: darwin
                      arch: x64
                      comment: 'Intel Mac'
                    - os: macos-latest
                      platform: darwin
                      arch: arm64
                      comment: 'Apple Silicon Mac'

        uses: ./.github/workflows/compile.yml
        with:
            os: ${{ matrix.os }}
            platform: ${{ matrix.platform }}
            arch: ${{ matrix.arch }}
            pre_release: ${{ inputs.pre_release }}

    ci-release-validate:
        name: Validate release
        runs-on: ubuntu-latest
        needs: ci-compile
        steps:
            - name: Download all compiled releases
              uses: actions/download-artifact@v4
              with:
                  path: artifact

            - name: Validate artifact
              run: |
                  artifact_paths=$(find ./artifact -iname "*.vsix" -type f | sort | tr '\n' ',')
                  if [ -z $artifact_paths ]; then
                      echo "::error::No artifact found to release"
                      exit 1
                  fi
                  echo "::notice::Found artifact: $artifact_paths"

    ci-release-github:
        name: Release to GitHub
        runs-on: ubuntu-latest
        if: ${{ !inputs.skip_github }}
        needs: ci-release-validate
        steps:
            - name: Download all compiled releases
              uses: actions/download-artifact@v4
              with:
                  path: artifact
            - name: Set tag name
              id: set_tag_name
              run: |
                  if [ -n "${{ inputs.tag }}" ]; then
                      tag_name="${{ inputs.tag }}"
                  else
                      tag_name="${{ github.ref_name }}"
                  fi
                  echo "TAG_NAME=$tag_name" >> "$GITHUB_OUTPUT"

            - name: Create GitHub Release
              uses: ncipollo/release-action@v1
              with:
                  tag: ${{ steps.set_tag_name.outputs.TAG_NAME }}
                  draft: true
                  artifacts: '${{ github.workspace }}/artifact/**/*.vsix'
                  artifactErrorsFailBuild: true
                  generateReleaseNotes: true
                  prerelease: ${{ inputs.pre_release }}

    ci-release-vscode:
        name: Release to VSCode Marketplace
        runs-on: ubuntu-latest
        if: ${{ !inputs.skip_vscode }}
        needs: ci-release-validate
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      package.json
                      package-lock.json
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
                  cache-dependency-path: package-lock.json
            - name: Install dependencies
              run: npm ci
            - name: Download all compiled releases
              uses: actions/download-artifact@v4
              with:
                  path: artifact
            - name: Check if the VSCE_PAT is set
              run: |
                  if [ -z "${{ secrets.VSCE_PAT }}" ]; then
                      echo "::error::VSCE_PAT is not set"
                      exit 1
                  fi
            - name: Publish to VSCode Marketplace
              run: |
                  if [ "${{ inputs.pre_release }}" = "true" ]; then
                      npx vsce publish --pat ${{ secrets.VSCE_PAT }} --packagePath $(find ./artifact -iname *.vsix) --pre-release
                  else
                      npx vsce publish --pat ${{ secrets.VSCE_PAT }} --packagePath $(find ./artifact -iname *.vsix)
                  fi
                  echo "::notice::Published to VSCode Marketplace successfully for pre-release: ${{ inputs.pre_release }}"

    ci-release-openvsx:
        name: Release to OpenVSX
        runs-on: ubuntu-latest
        if: ${{ !inputs.skip_openvsx }}
        needs: ci-release-validate
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      package.json
                      package-lock.json
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
                  cache-dependency-path: package-lock.json
            - name: Install dependencies
              run: npm ci
            - name: Download all compiled releases
              uses: actions/download-artifact@v4
              with:
                  path: artifact
            - name: Check if the OVSX_PAT is set
              run: |
                  if [ -z "${{ secrets.OVSX_PAT }}" ]; then
                      echo "::error::OVSX_PAT is not set"
                      exit 1
                  fi
            - name: Publish to OpenVSX
              run: |
                  if [ "${{ inputs.pre_release }}" = "true" ]; then
                      npx ovsx publish --pat ${{ secrets.OVSX_PAT }} --packagePath $(find ./artifact -iname *.vsix) --pre-release
                  else
                      npx ovsx publish --pat ${{ secrets.OVSX_PAT }} --packagePath $(find ./artifact -iname *.vsix)
                  fi
                  echo "::notice::Published to OpenVSX successfully for pre-release: ${{ inputs.pre_release }}"
